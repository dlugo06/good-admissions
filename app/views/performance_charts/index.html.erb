<p id="notice"><%= notice %></p>
<h1>Performance Charts</h1>

<div id="performance_chart" style="width: 100%">
  <% @locations.each do |location| %>
    <%= content_tag "div", id: location + "-chart", style: "width: 110%; height: 700px; float: center; margin-left: -5%; padding: 0;" do %>
    <% end %>
  <% end %>
  <%= div_for(@cohorts, style: "width: 50%; height: 350px; float: left", class: "cohort_chart") do |cohort|%>
  <% end %>
</div>

<script type="text/javascript" src="https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1','packages':['corechart']}]}"></script>


<script type="text/javascript">
    google.setOnLoadCallback(drawChart);
    function drawChart() {
      var studentHash = $('#students').data('students');
      var cohortsHash = $('#cohorts').data('cohorts');
      var locations = $('#locations').data('locations');
      var unspecified = [];
      var createdAt = "";

      function weeksOutTicker(week, cohort) {
        var diff = 0;
        var studentsInWeek = 0;
        var cohortIndex = 0;
        for (var i = 0; i < studentHash.length; i++) {
          if (studentHash[i].cohort_id === cohort) {
            for (var j = 0; j < cohortsHash.length; j++) {
              if (cohortsHash[j].id === cohort) {
                cohortIndex = j;
                cohortStartDate = cohortsHash[j].start_date;
                cohortStartDate = new Date(cohortStartDate);
                studentCreateDate = studentHash[i].created_at;
                studentCreateDate = new Date(studentCreateDate);
                diff = Math.ceil((cohortStartDate - studentCreateDate)/1000/60/60/24/7);
                if (diff >= week) {
                  studentsInWeek++;
                }
              }
            }
          }
        }
        return studentsInWeek/cohortsHash[cohortIndex].capacity;
      }

      function generateData(cohortId) {
        var allData = [['Weeks Out', 'Students Registered']];
        for (var i = 15; i >= 1; i--) {
          allData.push([i.toString(), weeksOutTicker(i, cohortId)]);
        }
        return google.visualization.arrayToDataTable(allData);
      }

      var options = {
        title: '',
        vAxis: { title: 'Capacity',
          gridlines: { count: 13 },
          minValue: 0,
          maxValue: 1.10,
          format: 'percent' },
        hAxis: { title: 'Weeks Out' },
        legend: { position: 'bottom' }
      };

      var optionsLoc = {
        title: '',
        vAxis: { title: 'Capacity',
          gridlines: { count: 13 },
          minValue: 0,
          maxValue: 1.10,
          format: 'percent' },
        hAxis: { title: 'Weeks Out' },
        legend: { position: 'bottom' }
      };

      for (var i = 0; i < cohortsHash.length; i++) {
        var id = "cohort_" + cohortsHash[i].id.toString();
        var chart = new google.visualization.LineChart(document.getElementById(id));
        var data = generateData(cohortsHash[i].id);
        options["title"] = cohortsHash[i].location + " Cohort " + cohortsHash[i].cohort_number + " Performance";
        chart.draw(data, options);
      }

      function generateLocationData(cohortId) {
        var locData = [];
        for (var i = 15; i >= 1; i--) {
          locData.push(weeksOutTicker(i, cohortId));
        }
        return locData;
      }

      function locationGraphGenerator(location) {
        var locationData = [];
        for (var m = 15; m >= 1; m--) {
          locationData.push([m.toString()]);
        }

        for (var j = 0; j < cohortsHash.length; j++) {
          if (cohortsHash[j].location === location) {
            singleCohortData = generateLocationData(cohortsHash[j].id);
            for (var i = 0; i < locationData.length; i++) {
              locationData[i].push(singleCohortData[i]);
            }
          }
        }
        return locationData;
      }

      function columnGen(location) {
        for (var j = 0; j < cohortsHash.length; j++) {
          if (cohortsHash[j].location === location) {
            var title = cohortsHash[j].location + " C" + cohortsHash[j].cohort_number;
            locationChart.addColumn('number', title);
          }
        }
      }

      for (var i = 0; i < locations.length; i++) {
        var id = locations[i] + "-chart";
        var chart = new google.visualization.LineChart(document.getElementById(id));
        optionsLoc["title"] = locations[i] + " Performance"
        var locationChart = new google.visualization.DataTable();
        locationChart.addColumn('string', 'Weeks Out');
        columnGen(locations[i]);
        locationChart.addRows(locationGraphGenerator(locations[i]));
        chart.draw(locationChart, optionsLoc);
      }
    }
  </script>


<%= content_tag "div", id: "students", data: { students: @students} do %>
<% end %>
<%= content_tag "div", id: "cohorts", data: { cohorts: @cohorts} do %>
<% end %>
<%= content_tag "div", id: "locations", data: { locations: @locations} do %>
<% end %>
